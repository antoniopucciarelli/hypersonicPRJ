SPARTA (7 Jan 2022)
# forces computation -> aerodynamic coefficients for different Kn, Ma & AOA
# authors:
#	antonio pucciarelli
#	raffaele tirotta
#
# aim:
# --- compute aerodynamic coefficient using DSMC
#

# VARIABLES DECLARATION
# setting up number of iterations in each loop
variable	nKnudsen		equal	1			# Knudsen
variable	nMach			equal	1			# Mach
variable	nAOA			equal	1			# angle of attack

# setting up mixture properties
variable	gammaMixture	equal	1.289			# specific heat ratio
variable	boltzConstant	equal   1.38E-23	# Boltzmann constant declaration

# setting up Mach number interval extremes
variable	minMach		equal	10				# minimum Mach number
variable	maxMach		equal	25				# maximum Mach number

# setting up Knudsen number interval extremes
variable	minKnudsen	equal	0.25			# minimum Knudsen number
variable	maxKnudsen	equal	0.5				# maximum Knudsen number

# setting up angle of attack interval extremes
variable	minAOA		equal	0				# minimum angle of attack
variable	maxAOA		equal	30				# maximum angle of attack

# setting up flow temperature
variable	Tflow		equal	300				# flow temperature

# setting up flow mean properties
#variable	N2mass		equal	4.65E-26		# averaged mixture weight
variable	N2diameter	equal	4.17E-10		# averaged mixture molecule dimension
variable        Rmixt           equal   192.11                  # averaged gas constant

# NUMBER OF SIMULATED PARTICLES IN ONE CELL
variable	NumberSimCell		equal	20				# number of parcels for every number density

# setting up simulation study values for a proper time/space analysis of the hypersonic flow
variable	Nlam		equal	5				# space
variable	Ntau		equal	5				# time

# setting up domain properties
variable	L			equal 	5				# reference length
variable	xMin		equal	-10				# minimum x of the grid
variable 	xMax		equal 	10				# maximum x of the grid
variable 	yMin		equal	-10				# minimum y of the grid
variable	yMax		equal	10				# maximum y of the grid
variable	zMin		equal	-10				# minimum z of the grid
variable	zMax		equal	10				# maximum z of the grid

# setting up 1st loop
variable iK loop ${nKnudsen}
variable iK loop 1

	# label declaration for the JUMP procedure
	label 		loopLabelKnudsen

	# setting up 2nd loop
	variable iM loop ${nMach}
	variable iM loop 1

		# label declaration for the JUMP procedure
		label	loopLabelMach

			# setting up 3rd loop
			variable iA loop ${nAOA}
			variable iA loop 1

				# label declaration for the JUMP procedure
				label		loopLabelAOA

				# printing nested loop properties
				print " "
 
				print "---------------------------------------"
---------------------------------------
				print "--- loop No. = ${iK} --- *Knudsen* ---"
--- loop No. = 1 --- *Knudsen* ---
				print "--- loop No. = ${iM} ---   *Ma*    ---"
--- loop No. = 1 ---   *Ma*    ---
				print "--- loop No. = ${iA} ---   *AOA*   ---"
--- loop No. = 1 ---   *AOA*   ---
				print "---------------------------------------"
---------------------------------------
				print " "
 

				# variables computations
				# AOA
				variable 	thetaAngle 	equal 	${iA}*5
				variable 	thetaAngle 	equal 	1*5
				# sound speed
				variable	cSpeed		equal	sqrt(${gammaMixture}*${Rmixt}*${Tflow})
				variable	cSpeed		equal	sqrt(1.289*${Rmixt}*${Tflow})
				variable	cSpeed		equal	sqrt(1.289*192.11*${Tflow})
				variable	cSpeed		equal	sqrt(1.289*192.11*300)
				# Mach number
				variable	MachNumber	equal	${minMach}+(${maxMach}-${minMach})/${nMach}*${iM}
				variable	MachNumber	equal	10+(${maxMach}-${minMach})/${nMach}*${iM}
				variable	MachNumber	equal	10+(25-${minMach})/${nMach}*${iM}
				variable	MachNumber	equal	10+(25-10)/${nMach}*${iM}
				variable	MachNumber	equal	10+(25-10)/1*${iM}
				variable	MachNumber	equal	10+(25-10)/1*1
				# flow speed
				variable	Uflow		equal	${MachNumber}*${cSpeed}
				variable	Uflow		equal	25*${cSpeed}
				variable	Uflow		equal	25*272.559969547988
				# Knudsen number
				variable	KnudsenNumber	equal 	${minKnudsen}+(${maxKnudsen}-${minKnudsen})/${nKnudsen}*${iK}
				variable	KnudsenNumber	equal 	0.25+(${maxKnudsen}-${minKnudsen})/${nKnudsen}*${iK}
				variable	KnudsenNumber	equal 	0.25+(0.5-${minKnudsen})/${nKnudsen}*${iK}
				variable	KnudsenNumber	equal 	0.25+(0.5-0.25)/${nKnudsen}*${iK}
				variable	KnudsenNumber	equal 	0.25+(0.5-0.25)/1*${iK}
				variable	KnudsenNumber	equal 	0.25+(0.5-0.25)/1*1
				# Lambda free stream
                                variable        meanFreePathFS  equal   ${KnudsenNumber}*${L}
                                variable        meanFreePathFS  equal   0.5*${L}
                                variable        meanFreePathFS  equal   0.5*5
				# number density -- pre-shock
				variable	numberDensity	equal	1.0/(sqrt(2)*${KnudsenNumber}*${L}*PI*${N2diameter}^2)
				variable	numberDensity	equal	1.0/(sqrt(2)*0.5*${L}*PI*${N2diameter}^2)
				variable	numberDensity	equal	1.0/(sqrt(2)*0.5*5*PI*${N2diameter}^2)
				variable	numberDensity	equal	1.0/(sqrt(2)*0.5*5*PI*4.17e-10^2)
				# number density -- post-shock
				variable	numberDensityPS equal   (${gammaMixture}+1)/(${gammaMixture}-1)*${numberDensity}
				variable	numberDensityPS equal   (1.289+1)/(${gammaMixture}-1)*${numberDensity}
				variable	numberDensityPS equal   (1.289+1)/(1.289-1)*${numberDensity}
				variable	numberDensityPS equal   (1.289+1)/(1.289-1)*5.17753461206348e+17
				# flow temperature -- post-shock
				variable	TflowPS		equal	${numberDensity}/${numberDensityPS}*${Uflow}^2/(3*${Rmixt})
				variable	TflowPS		equal	5.17753461206348e+17/${numberDensityPS}*${Uflow}^2/(3*${Rmixt})
				variable	TflowPS		equal	5.17753461206348e+17/4.10082239689042e+18*${Uflow}^2/(3*${Rmixt})
				variable	TflowPS		equal	5.17753461206348e+17/4.10082239689042e+18*6813.9992386997^2/(3*${Rmixt})
				variable	TflowPS		equal	5.17753461206348e+17/4.10082239689042e+18*6813.9992386997^2/(3*192.11)
				# mean free path -- post-shock
				variable	meanFreePathPS 	equal	1.0/(sqrt(2)*${numberDensityPS}*PI*${N2diameter}^2)
				variable	meanFreePathPS 	equal	1.0/(sqrt(2)*4.10082239689042e+18*PI*${N2diameter}^2)
				variable	meanFreePathPS 	equal	1.0/(sqrt(2)*4.10082239689042e+18*PI*4.17e-10^2)
				# thermal speed -- post-shock
				variable	thermalSpeed	equal	sqrt((8*${Rmixt}*${TflowPS})/(PI))
				variable	thermalSpeed	equal	sqrt((8*192.11*${TflowPS})/(PI))
				variable	thermalSpeed	equal	sqrt((8*192.11*10171.499563128)/(PI))
				# collision time interval -- post-shock
				variable	timeInterval	equal	1.0/(${numberDensityPS}*PI*${N2diameter}^2*${thermalSpeed})
				variable	timeInterval	equal	1.0/(4.10082239689042e+18*PI*${N2diameter}^2*${thermalSpeed})
				variable	timeInterval	equal	1.0/(4.10082239689042e+18*PI*4.17e-10^2*${thermalSpeed})
				variable	timeInterval	equal	1.0/(4.10082239689042e+18*PI*4.17e-10^2*2230.68134610212)
				# simulation time interval -- using post-shock conditions and the engineering/simulation relaxation
				variable	dt		equal 	${timeInterval}/${Ntau}
				variable	dt		equal 	0.000200110335938686/${Ntau}
				variable	dt		equal 	0.000200110335938686/5
				# simulation space interval -- using post-shock conditions and the engineering/simulation relaxation
				variable	ds 		equal 	${meanFreePathFS}/${Nlam}
				variable	ds 		equal 	2.5/${Nlam}
				variable	ds 		equal 	2.5/5
				#SET TO FREESTREAM CONDITION -> if it doesn't satisfy  change it
                                variable        NumberTrueCell  equal   ${numberDensity}*${ds}*${ds}*${ds}
                                variable        NumberTrueCell  equal   5.17753461206348e+17*${ds}*${ds}*${ds}
                                variable        NumberTrueCell  equal   5.17753461206348e+17*0.5*${ds}*${ds}
                                variable        NumberTrueCell  equal   5.17753461206348e+17*0.5*0.5*${ds}
                                variable        NumberTrueCell  equal   5.17753461206348e+17*0.5*0.5*0.5
				# number of simulated particles -- post-shock
                                variable        Wp              equal   ${NumberTrueCell}/${NumberSimCell}
                                variable        Wp              equal   6.47191826507935e+16/${NumberSimCell}
                                variable        Wp              equal   6.47191826507935e+16/20
				# getting cell properties
				variable	xNcells		equal	round((${xMax}-${xMin})/${ds}) 	# x direction
				variable	xNcells		equal	round((10-${xMin})/${ds}) 	
				variable	xNcells		equal	round((10--10)/${ds}) 	
				variable	xNcells		equal	round((10--10)/0.5) 	
				variable	yNcells		equal   round((${yMax}-${yMin})/${ds})	# y direction
				variable	yNcells		equal   round((10-${yMin})/${ds})	
				variable	yNcells		equal   round((10--10)/${ds})	
				variable	yNcells		equal   round((10--10)/0.5)	
				variable    zNcells     equal   round((${zMax}-${zMin})/${ds})  # z direction
				variable    zNcells     equal   round((10-${zMin})/${ds})  
				variable    zNcells     equal   round((10--10)/${ds})  
				variable    zNcells     equal   round((10--10)/0.5)  

				# printing values
				print " "
 
				print "--- AOA                           = ${thetaAngle}"
--- AOA                           = 5
				print "--- sound speed                   = ${cSpeed}"
--- sound speed                   = 272.559969547988
				print "--- Mach number	                 = ${MachNumber}"
--- Mach number	                 = 25
				print "--- Knudsen number                = ${KnudsenNumber}"
--- Knudsen number                = 0.5
				print "--- flow speed                    = ${Uflow}"
--- flow speed                    = 6813.9992386997
				print "--- number density    *PRE-SHOCK* = ${numberDensity}"
--- number density    *PRE-SHOCK* = 5.17753461206348e+17
				print "--- number density   *POST-SHOCK* = ${numberDensityPS}"
--- number density   *POST-SHOCK* = 4.10082239689042e+18
				print "--- flow temperature *POST-SHOCK* = ${TflowPS}"
--- flow temperature *POST-SHOCK* = 10171.499563128
				print "--- mean free path   *POST-SHOCK* = ${meanFreePathPS}"
--- mean free path   *POST-SHOCK* = 0.31564001747488
				print "--- thermal speed	             = ${thermalSpeed}"
--- thermal speed	             = 2230.68134610212
				print "--- collision time interval       = ${timeInterval}"
--- collision time interval       = 0.000200110335938686
				print "--- ds				  			 = ${ds}"
--- ds				  			 = 0.5
				print "--- dt				  			 = ${dt}"
--- dt				  			 = 4.00220671877372e-05
				print "--- X cells			  			 = ${xNcells}"
--- X cells			  			 = 40
				print "--- Y cells			  			 = ${yNcells}"
--- Y cells			  			 = 40
				print " "
 

                # running case
                include     in.case
# forces computation -> aerodynamic coefficients for different Kn, Ma & AOA
# authors:
#	antonio pucciarelli
#	raffaele tirotta
#
# aim:
# --- compute aerodynamic coefficient using DSMC
#

# INITIALIZING CASE
# seed generation -> random properties for the simulation
seed            12345

# setting up simulation type
dimension       3

# setting up grid properties
global          surfmax     100000
global          splitmax    15
global          gridcut     0.0 comm/sort yes

# setting up boundary properties
boundary        oo oo oo

# SETTING UP GRID
# study box generation
create_box      ${xMin} ${xMax} ${yMin} ${yMax} ${zMin} ${zMax}
create_box      -10 ${xMax} ${yMin} ${yMax} ${zMin} ${zMax}
create_box      -10 10 ${yMin} ${yMax} ${zMin} ${zMax}
create_box      -10 10 -10 ${yMax} ${zMin} ${zMax}
create_box      -10 10 -10 10 ${zMin} ${zMax}
create_box      -10 10 -10 10 -10 ${zMax}
create_box      -10 10 -10 10 -10 10
Created orthogonal box = (-10 -10 -10) to (10 10 10)

# grid generation
create_grid     ${xNcells} ${yNcells} 1
create_grid     40 ${yNcells} 1
create_grid     40 40 1
WARNING: Could not acquire nearby ghost cells b/c grid partition is not clumped (../grid.cpp:410)
Created 1600 child grid cells
  CPU time = 0.000519399 secs
  create/ghost percent = 94.0978 5.90221
#${zNcells}

# parallel computing settings
balance_grid    rcb part
Balance grid migrated 1200 cells
  CPU time = 0.000491995 secs
  reassign/sort/migrate/ghost percent = 47.5417 0.293702 22.6878 29.4767
fix             loadbalance balance 1000 1.1 rcb part

# SETTING UP PARTICLES PROPERTIES
# No. of particles | No. of simulated particles
global          nrho ${numberDensity} fnum ${Wp}
global          nrho 5.17753461206348e+17 fnum ${Wp}
global          nrho 5.17753461206348e+17 fnum 3.23595913253968e+15

# species properties loading
species         collisionProperties/marsAtmosphere.species CO2 N2

# mixture properties declaration
mixture     atmoMars    CO2 N2  vstream ${Uflow} 0.0 0.0 temp ${Tflow} 	# name | molecules | speed | temperature
mixture     atmoMars    CO2 N2  vstream 6813.9992386997 0.0 0.0 temp ${Tflow} 	
mixture     atmoMars    CO2 N2  vstream 6813.9992386997 0.0 0.0 temp 300 	
mixture		atmoMars    CO2 	frac 0.9537				                # CO2 molar fraction
mixture		atmoMars    N2  	frac 0.0463				                # N2 molar fraction
mixture     m_CO2       CO2                                             # generation of a single mixture for the CO2 species properties tracking
mixture     m_N2        N2                                              # generation of a single mixture for the N2 species properties tracking

# SURFACE PROPERTIES SETUP
# surface loading and rotation
read_surf       geometry/data.orionSimple origin 0.0 0.0 0.0 rotate 180-${thetaAngle} 0 0 1 trans 1 0 0
read_surf       geometry/data.orionSimple origin 0.0 0.0 0.0 rotate 180-5 0 0 1 trans 1 0 0
  25732 points
  51460 triangles
  -2.30625 1 xlo xhi
  -2.51498 2.51429 ylo yhi
  -2.51485 2.51453 zlo zhi
  0.0233178 min triangle edge length
  0.00054053 min triangle area
  65 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  23 tiny edges removed
  1535 0 65 = cells outside/inside/overlapping surfs
  34 31 = surf cells with 1,2,etc splits
  7964.64 7964.64 = cell-wise and global flow volume
  CPU time = 3.29832 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.980166 2.11932 0.000625651 4.7254 92.1745 0.0460671 8.43156e-05
  surf2grid time = 0.155859 secs
  map/comm1/comm2/comm3/comm4/split percent = 2.94472 9.8522 0.0510147 0.471178 4.17945 82.035

# COLLISION PROPERTIES
# surface collision properties
surf_collide    surfCollision   diffuse 1500.0 1.0
surf_modify     all             collide surfCollision

# molecule(s)/molecule(s) collision properties
collide 	    vss         atmoMars collisionProperties/marsAtmosphere.vss
collide_modify	vibrate     smooth

# REACTION SETUP
# problem set as non reactive
react		    none

# INJECTION SETUP
# due to flow speed and thermal speed -> flow only from x[+ve], y[-ve], y[+ve], z[-ve] and z[+ve]
fix fixInject   emit/face atmoMars xlo ylo yhi zlo zhi

# TIME STEP DECLARATION
timestep        ${dt}
timestep        4.00220671877372e-05

# PROPERTIES COMPUTATION
# force all over the surface
compute         FORCEs      surf        all all             fx fy	                        # x|y direction

# heat flux computation
compute         heatFlux	surf        all all             etot                            # heat flux on the whole body

# summing up all the forces and average them
fix             forceAVE    ave/surf    all 1 10 100        c_FORCEs[*]     ave one         # average x|y direction

# summing up all the heat flux and average them
fix		        heatAVE     ave/surf    all 1 10 100	    c_heatFlux[*]   ave one         # average heat flux

# sum of the average forces
compute         forceTOT    reduce      sum                 f_forceAVE[1] f_forceAVE[2]     # total x|y direction

# sum of the average forces
compute         heatTOT     reduce      sum                 f_heatAVE                       # total heat flux

# PLOTTING/PRINTING PROPERTIES
# every 100 time steps
stats           100

# output setup
stats_style     step    cpu     c_forceTOT[1]   c_forceTOT[2]   c_heatTOT

# doing the first run of the case in order to get a first approximation of the total drag force
run     2000
Memory usage per proc in Mbytes:
  particles (ave,min,max) = 0 0 0
  grid      (ave,min,max) = 78.1064 78.1064 78.1064
  surf      (ave,min,max) = 6.47804 6.47804 6.47804
  total     (ave,min,max) = 84.8789 84.8789 84.8789
Step CPU c_forceTOT[1] c_forceTOT[2] c_heatTOT 
       0            0            0            0            0 
     100    34.25